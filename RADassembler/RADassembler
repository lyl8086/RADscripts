#!/bin/bash
shopt -s  expand_aliases 
alias tcmd="date '+%A %D %X'"
readonly VERSION='RADassembler 1.23'
t0=$(date +%s)
Usage='

   ###############################################################################
   +                         RADassembler 1.23                                   +
   + A Pipeline For Assembly of PE RAD-seq (RPE) Reads from Multiple Individuals +
   +                Contact: liyulong12@mails.ucas.ac.cn                         +
   ###############################################################################
    
    -i: path to reads with enzyme cut sites of each individual, i.e. read1 files? 
        name as (individual name).fq[fa][.gz].
    -o: path to output.
    -s: path to paired-end reads of each individual, i.e. read2 files?
        name as (individual name_[12]).fq[fa][.gz].
    -P: PopMaP file.
    -f: type of input files. "fasta", "fastq", "gzfastq", "gzfasta".
    -M: minimum stack depth.
    -D: minimum read depth of a locus to export for assembly, also accept [lower:upper].
    -m: mismatch for ustacks.
    -n: mismatch for cstacks.
    -g: perform gapped assembly in stacks, 1 for ustacks, 2 for cstacks, 3 for all, 0 turn off.
    -c: individual coverage for a locus.
    -a: assembler, either "cap3" or "velvet", default cap3.
    -k: hash length for velvet, default 27.
    -x: do not verify multiple matches when exporting fasta files.
    -A: turn off assembly.
    -R: run a single component, accept "ustacks", "cstacks" or "assembly".
    -t: number of threads.
    -v: version
    chooseM: Similarity threshold selection within individual [ustacks].
    chooseN: Similarity threshold selection across individuals [cstacks].
    r80: Parameters optimization for m and M of Stacks using method of Paris et al. 2017 
'
while getopts "i:o:s:m:M:n:f:P:D:t:R:c:g:a:k:hAxv" arg
do
    case $arg in
        i)
            in_path=$OPTARG     #file path.
            ;;
        o)
            out_path=$OPTARG    #out path.
            ;;
        s)
            samp=$OPTARG        #paired-end file path.
            ;;
        f)
            ftyp=$OPTARG        #file type.
            ;;
        M)
            minDP=$OPTARG       #minimum stacks depth.
            ;;
        m)
            mis=$OPTARG         #mismatch for ustacks.
            ;;
        n)
            c_mis=$OPTARG       #mismatch for cstacks.
            ;;
        g)
            gap=$OPTARG
            case $gap in
                1)
                    ugap='--gapped'
                    cgap=0
                    ;;
                2)
                    ugap=0
                    cgap='--gapped'
                    ;;
                3)
                    ugap='--gapped'
                    cgap='--gapped'
                    ;;
                0)
                    ugap=0;
                    cgap=0;
                    ;;
                ?)
                    ugap=''
                    cgap=''
                    ;;
            esac
            ;;
        P)
            map=$OPTARG         #PopMap file
            ;;
        D)
            minL=$OPTARG        #minimum locus depth for the export reads.
            ;;
        t)
            threads=$OPTARG
            ;;
        c)
            cov=$OPTARG
            ;;
        R)
            run_flg=$OPTARG
            ;;
        h)
            echo "$Usage"
            exit 0
            ;;
        A)
            asmb=0
            ;;
        a)
            assembler=$OPTARG
            ;;
        k)
            kmer=$OPTARG
            ;;
        x)
            verify=0
            ;;
        v)
            echo "$VERSION"
            exit 0
            ;;
        ?)
            echo -e "\033[31m Unknown argument!\033[0m"
            exit 1
            ;;
    esac
done

###### Functions ######
function goto
{
    label=$1
    cmd=$(sed -n "/#$label:/{:a;n;p;ba};" $0)
    eval "$cmd"
    if [ $?==0 ]; then exit 0; else exit 1; fi
}

iter=0
function guess_fmt()
{

    if [ "$ftyp" == 'gzfastq' ];
    then
        suffix='fq.gz'
    elif [ "$ftyp" == 'fastq' ];
    then
        suffix='fq'
    elif [ "$ftyp" == 'fasta' ];
    then
        suffix='fa'
    elif [ "$ftyp" == 'gzfasta' ];
    then
        suffix='fa.gz'
    else
        iter=1
        f=`ls $1/$2*`
        if [ $? != 0 ];
        then
            echo -e "\033[47;31m File [prefix is $1/$2] not exists! \033[0m"
            echo -e "Quitting..."
            exit 1
        fi
        if [ ${f:0-6} == '.fq.gz' ];
        then
            ftyp='gzfastq'
            suffix='fq.gz'
        elif [ ${f:0-9} == '.fastq.gz' ];
        then
            ftyp='gzfastq'
            suffix='fastq.gz'
        elif [ ${f:0-6} == '.fa.gz' ];
        then
            ftyp='gzfasta'
            suffix='fa.gz'
        elif [ ${f:0-9} == '.fasta.gz' ];
        then
            ftyp='fasta'
            suffix='fasta.gz'
        elif [ ${f:0-3} == '.fq' ];
        then
            ftyp='fastq'
            suffix='fq'
        elif [ ${f:0-6} == '.fastq' ];
        then
            ftyp='fastq'
            suffix='fastq'
        elif [ ${f:0-3} == '.fa' ];
        then
            ftyp='fasta'
            suffix='fa'
        elif [ ${f:0-6} == '.fasta' ];
        then
            ftyp='fasta'
            suffix='fasta'
        else
            echo -e "\033[47;31m Unknown file format! [$f]\033[0m"
            echo -e "Quitting..."
            exit 1
        fi
    fi

}

function check_fmt() {
    
    if [ ! -f "$1/$2.$3" ];
    then
        ftyp=''
        echo -e "\033[47;31m File format is not correct, I'm guessing...\033[0m"
        guess_fmt $1 $2
    fi
}

function covert_time() {
    # from second.
    day=$(($1/86400))
    TZ=UTC0 printf "${day}d:%(%Hh:%Mm:%Ss)T" $1
}

function running_time() {

    t2=$(date +%s)
    prog=$1
    echo -e "\n====== $prog running time: `covert_time $(( $t2 - $t1 ))` ======\n"
    t1=$t2
}

function read_popmap() {
    ###### Read PopMap ######
    while read line
    do
        key=`echo $line | awk '{print $1}'`
        val=`echo $line | awk '{print $2}'`
        if [ "$key" ] && [ "$val" ];
        then
            pop[$key]="$val"
        fi
    done < $1
}

function read_ind_order() {
    # read popmap and keep the order of individual.
    pop=''
    pop=(`awk '{print $1}' $1`)
}

function get_version() {
    ver=`$1 --version 2>&1 |head -1|awk '{print $2}'`
    f_ver=$(awk -v a=$ver 'BEGIN{ 
    if (a<2) {print 1} 
    else if (/Beta/) 
    {b=gensub(/.+Beta(.+)/,"\\1","g",a);
    if (b<9) {print 1} else {print 2}}
    else {print 2}}')
}

function gplot() {
local p=$1
local max1=$2+1
local xlab=$3
local ylab=$4
local mlab=$5
local name=$6
local asy=$7
local leg=$8                            # legend from head.
local yran=$9
if [ "$yran" ];
then
    max2=${yran#*:}
    min2=${yran%:*}
    min2=${min2:="GPVAL_Y_MIN-$max2*0.1"}
else 
    max2='GPVAL_Y_MAX+GPVAL_Y_MAX*0.1'
    min2='GPVAL_Y_MIN-GPVAL_Y_MAX*0.1'
fi
if [ "$leg" -eq 1 ];
then
    autoleg='set key autotitle columnhead'
else
    autoleg='unset key'
fi
if [ "$asy" -eq 1 ];
then
    asy="set arrow from 0,GPVAL_DATA_Y_MIN to $max1,GPVAL_DATA_Y_MIN lt 2 lw 2 lc rgb \"green\" nohead"
else
    asy=''
fi

gnuplot --persist << EOF
set terminal dumb size 100, 30
set key outside
$autoleg
unset label
set mytics 2
set xtics 1
set xrange [0:$max1]
set yrange [$min2:$max2]
set title "$mlab"
set xlabel "$xlab"
set ylabel "$ylab"
set xzeroaxis
plot $p
set terminal pdf noenhanced
set key inside
set output "$out/$name.pdf"
$autoleg
set yrange [$min2:$max2]
$asy
replot
set terminal png noenhanced 
set output "$out/$name.png"
replot
EOF
}

chooseM() {
    
    local file=$1
    local out=$2
    local mis=$3
    local threads=$4
    local minDP=$5
    local gap=$6
    local flag=$7
    local yrange=$8
    
    if [ $# -lt 4 ];
    then
        echo
        echo
        echo -e "\tSimilarity threshold selection for ustacks within individual\n"
        echo -e "\tUsage: RADassembler chooseM [infile] [outpath] [max mismatch] [threads] [minDP] [gapped] [replot] [yrange]"
        echo
        echo
        exit 0
    fi
    local name=`basename $file`
    local name=${name%.f*} # remove suffix f[ast][aq][.gz], may be bugs here.
    if [ ! -d $out ]; then mkdir $out; fi
    set -e
    get_version 'ustacks'
    if [ "$f_ver" == 1 ];
    then
        if [ "$gap" == 1 ]; then gap='--gapped'; else gap=''; fi
    else
        if [ "$gap" == 0 ]; then gap='--disable-gapped'; else gap=''; fi
    fi
    
    if [ ! "$minDP" ]; then minDP=3; fi
    
    if [ -z "$flag" ];
    then
        echo -e "Mismatch\t1_allele\t2_alleles\t>=3_alleles" >$out/ustacks.stat
        for m in `seq 1 $mis`;
        do
            ustacks -f $file -o $out -p $threads -M $m -m $minDP -d -N 0 -H -i 1 $gap 2>&1 | tee $out/Ustacks.$m.log
            if [ ${PIPESTATUS[0]} != 0 ]; then echo "ustacks for chooseM error!"; exit 1; fi 
            nparts=`zcat $out/$name*.snps.tsv.gz | head -2 | tail -1 | awk -F "\t" '{print NF}'` # test if new version for stacks.
            if [ "$nparts" == 10 ];
            then
                nloci=`zcat $out/$name*.snps.tsv.gz | grep -v '^#' | tail -1 | cut -f3`
                zcat $out/$name*.alleles.tsv.gz | grep -v '^#' | cut -f3 | sort| uniq -c | \
                awk -v n=$nloci -v m=$m '{if($1==2){a++;} else if($1>2){b++;}} END {print m"\t"n-a-b"\t"a"\t"b;}' \
                >>$out/ustacks.stat
            elif [ "$nparts" == 9 ];
            then
                nloci=`zcat $out/$name*.snps.tsv.gz | grep -v '^#' | tail -1 | cut -f2`
                zcat $out/$name*.alleles.tsv.gz | grep -v '^#' | cut -f2 | sort| uniq -c | \
                awk -v n=$nloci -v m=$m '{if($1==2){a++;} else if($1>2){b++;}} END {print m"\t"n-a-b"\t"a"\t"b;}' \
                >>$out/ustacks.stat
            else
                echo "Stacks files [$out/$name*.snps.tsv.gz] error!"
                exit 1;
            fi
        done
    fi
    dat="$out/ustacks.stat"
    plot="'$dat' using 1:2 with linespoints, '$dat' using 1:3 with linespoints, '$dat' using 1:4 with linespoints"
    set +e
    gplot "$plot" "$mis" 'Mismatch' 'Number of loci' 'Similarity threshold within individual (ustacks)' 'chooseM_ustacks' 0 1 "$yrange"
    exit 0
}

chooseN() {
    # n is mismatch for cstacks
    
    local in=$1
    local out=$2
    local map=$3
    local max=$4
    local threads=$5
    local gap=$6
    local flag=$7                           # flag for replot.
    local yrange=$8                         # 

    tmp=''
    plot=''
    if [ $# -lt 5 ];
    then
        echo
        echo
        echo -e "\tSimilarity threshold selection for cstacks across individuals\n"
        echo -e "\tUsage: RADassembler chooseN [inpath] [outpath] [popmap] [max mismatch] [threads] [gapped] [replot] [yrange]"
        echo
        echo
        exit 0
    fi
    
    if [ ! -d $out ]; then mkdir $out; fi
    set -e
    get_version 'cstacks'
    if [ "$f_ver" == 1 ];
    then
        if [ "$gap" == 1 ]; then gap='--gapped'; else gap=''; fi
    else
        if [ "$gap" == 0 ]; then gap='--disable_gapped'; else gap=''; fi
    fi
    
    if [ -z "$flag" ];
    then
        ##sort the individuals according to the num of loci.
        : >$out/pop.loci
        pop=(`cut -f1 $map`)
        len=${#pop[@]}
        for ((i=0;i<$len;i++));
        do
            indiv=${pop[$i]}
            zcat $in/$indiv.tags.tsv.gz |grep -c 'consensus' >>$out/pop.loci
        done
        paste $map $out/pop.loci >$out/pop.loci.1
        sort -k3,3nr $out/pop.loci.1 | cut -f1,3 >$out/pop.order
        rm $out/pop.loci.1 $out/pop.loci
        pop=(`cut -f1 $out/pop.order`)
        len=${#pop[@]}
        for ((i=0;i<$len;i++));
        do
            indiv=${pop[$i]}
            samp+="-s $in/$indiv "
        done
        ##################################################
        
        : >$out/catalog.num
        for m in `seq 1 $max`;
        do
            cstacks -n $m -o $out $gap -p $threads $samp 2>&1 | tee $out/Cstacks.$m.log #gapped
            if [ ${PIPESTATUS[0]} != 0 ]; then echo "cstacks for chooseN error!"; exit 1; fi 
            echo "Mismatch=$m" >$out/$m
            grep "newly added" $out/Cstacks.$m.log |awk '{print $1}' >>$out/$m
            zcat $out/*catalog.tags.tsv.gz | grep -v '^#' -c >>$out/catalog.num
            tmp+=" $out/$m"
            plot+="'$out/cstacks.stat' using (\$0+1):$m with linespoints, "
        done
    paste $tmp >$out/cstacks.stat
    rm $tmp
    else 
        for m in `seq 1 $max`;
    do
        plot+="'$out/cstacks.stat' using (\$0+1):$m with linespoints, "
    done
    fi
    let nind=$(cat $out/cstacks.stat|wc -l)-1
    set +e
    gplot "$plot" "$nind" 'Individual index' 'Number of incremental loci' 'Similarity threshold across individuals (cstacks)' 'chooseN_cstacks' 1 1 "$yrange"
    plot="'$out/catalog.num' using (\$0+1):1 with linespoints"
    gplot "$plot" "$m" 'Mismatch' 'Number of loci' 'Number of total catalog loci' 'chooseN_cstacks_total' 1 0 "$yrange"
    exit 0
    
}

function iter_pars() {
    
    local m=$1 # pars ro iteration
    local n=$2 # name
    local in_path=$3
    local out_path=$4
    local pop=$5
    local threads=$6
    
    f_ver=1
    get_version ustacks
    if [ $n == 'min' ];then a=`seq 2 $m`;m="-m"; elif [ $n == 'Mis' ]; then a=`seq 1 $m`; m="-M"; fi
    for i in $a
    do
        if [ $f_ver == 1 ]; then 
            denovo_map.pl -b 1 -o $out_path -O $pop -T $threads --samples $in_path $m $i -S -i 1 -X "populations:-r 0.4"
        elif [ $f_ver == 2 ]; then
            denovo_map.pl -o $out_path --popmap $pop -T $threads --samples $in_path $m $i -X "populations:-r 0.4"
            # snps distribs in stacks2
            sed -n '/BEGIN snps_per_loc_postfilters/, /END snps_per_loc_postfilters/p' $out_path/populations.log.distribs \
            | tail -n+3 | head -n-1 | sed 's/n_snps/#n_snps/'>>$out_path/populations.log
        else
            echo inappropriate version of stacks: $f_ver
        fi
        mv $out_path/*denovo_map.log $out_path/${n}$i.denovo.log
        mv $out_path/*populations.log $out_path/${n}$i.r40.log
        # r60
        populations -P $out_path -M $pop -t $threads -r 0.6
        if [ $f_ver == 2 ]; then
            sed -n '/BEGIN snps_per_loc_postfilters/, /END snps_per_loc_postfilters/p' $out_path/populations.log.distribs \
            | tail -n+3 | head -n-1 | sed 's/n_snps/#n_snps/'>>$out_path/populations.log
        fi
        mv $out_path/*populations.log $out_path/${n}$i.r60.log
        # r80
        populations -P $out_path -M $pop -t $threads -r 0.8
        if [ $f_ver == 2 ]; then
            sed -n '/BEGIN snps_per_loc_postfilters/, /END snps_per_loc_postfilters/p' $out_path/populations.log.distribs \
            | tail -n+3 | head -n-1 | sed 's/n_snps/#n_snps/'>>$out_path/populations.log
        fi
        mv $out_path/*populations.log $out_path/${n}$i.r80.log
        
        # stat
        # 1. depth of coverage
        sed -n '/Depths of Coverage for Processed Samples:/, /cstacks/p' $out_path/${n}$i.denovo.log \
        | awk -v d=$i '/(.+):\s+(.+)x$/ {gsub(/x/,"",$2); print d,$2}' >>$out_path/${n}_depth.stat
        # 2. num of loci (t) and
        # 3. num of polymorphic loci (p) and
        # 4. num of snps (e)
        for f in `ls $out_path/*.snps.tsv.gz`
        do
            nparts=`zcat $f | head -2 | tail -1 | awk -F "\t" '{print NF}'`
            if [ $nparts == 10 ];
            # old version
            then
                zcat $f | awk -v d=$i '{t=$3; if ($5=="E") {e++;p[t]++}} END{print d,t,length(p),e}' >>$out_path/${n}_isnps.stat
            elif [ "$nparts" == 9 ];
            # new version
            then
                zcat $f | awk -v d=$i '{t=$2; if ($4=="E") {e++;p[t]++}} END{print d,t,length(p),e}' >>$out_path/${n}_isnps.stat
            fi
        done
        # overall
        awk -v d=$i '{if (!/^#n_snps/&&c!=1) {next;} else {c=1} t+=$2;e+=$1*$2;if ($1!=0) {p+=$2}} END{print d,t,p,e}' $out_path/$n$i.r40.log >>$out_path/${n}_r40.stat
        awk -v d=$i '{if (!/^#n_snps/&&c!=1) {next;} else {c=1} t+=$2;e+=$1*$2;if ($1!=0) {p+=$2}} END{print d,t,p,e}' $out_path/$n$i.r60.log >>$out_path/${n}_r60.stat
        awk -v d=$i '{if (!/^#n_snps/&&c!=1) {next;} else {c=1} t+=$2;e+=$1*$2;if ($1!=0) {p+=$2}} END{print d,t,p,e}' $out_path/$n$i.r80.log >>$out_path/${n}_r80.stat
        
    done
}

function run_r80() {
    
    local in_path=$1
    local out_path=$2
    local pop=$3
    local m=$4    # depth
    local M=$5    # mismatch
    local t=$6
    if [ $# -lt 6 ];
    then
        echo
        echo
        echo -e "\tParameters optimization for m and M of stacks\n"
        echo -e "\tUsage: RADassembler r80 [inpath] [outpath] [popmap] [maxDepth] [maxMismatch] [threads]\n"
        echo
        echo
        exit 0
    fi 
    ######
    # XXX.snps.tsv: Model calls from each locus
    # Sql_ID Sample_ID Locus_ID Column 	Type Likelihood Rank_1 Rank_2 Rank_3 Rank_4
    
    # XXX.tags.tsv: Assembled loci
    # Sql_ID Sample_ID Locus_ID Chromosome Basepair Strand Sequence_Type Stack_component Sequence_ID Sequence Deleveraged_Flag Blacklisted_Flag Lumberjackstack_Flag Log_likelihood			
    
    # denovo_map.log
    # coverage of depth:
    
    # populations.log
    # #n_snps	n_loci
    
    #
    ######
    set -e
    # Initialize
    if [ ! -d "$out_path" ]; then mkdir $out_path;fi
    echo m coverage>$out_path/min_depth.stat
    echo m assembled_loci polymorphic_loci snps>$out_path/min_isnps.stat
    echo m assembled_loci polymorphic_loci snps>$out_path/min_r40.stat
    echo m assembled_loci polymorphic_loci snps>$out_path/min_r60.stat
    echo m assembled_loci polymorphic_loci snps>$out_path/min_r80.stat
    echo m coverage>$out_path/Mis_depth.stat
    echo M assembled_loci polymorphic_loci snps>$out_path/Mis_isnps.stat
    echo M assembled_loci polymorphic_loci snps>$out_path/Mis_r40.stat
    echo M assembled_loci polymorphic_loci snps>$out_path/Mis_r60.stat
    echo M assembled_loci polymorphic_loci snps>$out_path/Mis_r80.stat
    f_ver=1
    get_version ustacks
    # depth
    
    iter_pars $m 'min' $in_path $out_path $pop $t
    # mismatch
    iter_pars $M 'Mis' $in_path $out_path $pop $t
    set +e
    # plot and clean
    cd $out_path && r80_plot 'min' 'min.png' 2 $m && r80_plot 'Mis' 'Mis.png' 1 $M && mkdir -p log && mv *.log log/ && cd -
    
}

function r80_plot() {

    in=$1
    out=$2
    co=$3
    max=$4
    [ "$in" == 'min' ] && xlab='m'
    [ "$in" == 'Mis' ] && xlab='M'
    f1=${in}_isnps.stat
    f2=${in}_r40.stat
    f3=${in}_r60.stat
    f4=${in}_r80.stat
    gnuplot --persist << EOF
    set term png
    set output "depth.png"
    set key autotitle columnhead
    set style fill solid 0.25 border -1
    set style boxplot outliers pointtype 7
    set style data boxplot
    set key lmargin
    # depth
    set xlabel 'm'
    set ylabel 'coverage'
    plot "min_depth.stat" using (2):2:(0.5):1 w boxplot notitle
    # assembled loci
    set term png size 1600,800
    set output "$out"
    set multiplot layout 2,3
    set xrange [$co-0.75:$max+0.75]
    set xtics $co,1,$max
    set xlabel ""
    set ylabel "Number of assembled loci"
    plot "$f2" u 1:2 w points title 'r40' pt 12 ps 1.5, "$f3" using 1:2 w points title 'r60' pt 13 ps 1.5, \
    "$f4" using 1:2 w points title 'r80' pt 5 ps 1.5, "$f1" u ($co):2:(0.5):1 w boxplot notitle
    
    unset key
    set ylabel "Number of polymorphic loci"
    plot "$f2" u 1:3 w points title 'r40' pt 12 ps 1.5, "$f3" using 1:3 w points title 'r60' pt 13 ps 1.5, \
    "$f4" using 1:3 w points title 'r80' pt 5 ps 1.5, "$f1" u ($co):3:(0.5):1 w boxplot notitle
    
    set ylabel "Number of SNPs"
    plot "$f2" u 1:4 w points title 'r40' pt 12 ps 1.5, "$f3" using 1:4 w points title 'r60' pt 13 ps 1.5, \
    "$f4" using 1:4 w points title 'r80' pt 5 ps 1.5, "$f1" u ($co):4:(0.5):1 w boxplot notitle
    
    # plot r80 again
    set key lmargin
    set xlabel "$xlab"
    set xrange [$co-0.75:$max+0.75]
    set xtics $co,1,$max
    set ylabel "Number of assembled loci"
    plot "$f2" u 1:2 w points title 'r40' pt 12 ps 1.5, "$f3" using 1:2 w points title 'r60' pt 13 ps 1.5, \
    "$f4" using 1:2 w points title 'r80' pt 5 ps 1.5
    
    unset key
    set ylabel "Number of polymorphic loci"
    plot "$f2" u 1:3 w points title 'r40' pt 12 ps 1.5, "$f3" using 1:3 w points title 'r60' pt 13 ps 1.5, \
    "$f4" using 1:3 w points title 'r80' pt 5 ps 1.5
    
    set ylabel "Number of SNPs"
    plot "$f2" u 1:4 w points title 'r40' pt 12 ps 1.5, "$f3" using 1:4 w points title 'r60' pt 13 ps 1.5, \
    "$f4" using 1:4 w points title 'r80' pt 5 ps 1.5
    unset multiplot
EOF

}

function run_ustacks() {
    set -e 
    local out_path=$1
    local mis=$2
    local minDP=$3
    local threads=$4
    local map=$5
    local len=${#indivs[@]}
    if [ $len == 0 ]; then echo "No files for running ustacks!"; exit 1; fi
    get_version 'ustacks'
    if [ ! -z "$ugap" ];
    then
        if [ "$ugap" == 0 ];
        then
            if [ "$f_ver" == 2 ]; then ugap='--disable-gapped'; else ugap=''; fi
        else
            if [ "$f_ver" == 2 ]; then ugap=''; fi
        fi
    fi
    for ((i=0;i<$len;i++));
    do
        indiv=${indivs[$i]}
        let j=$i+1
        # disable haplotype from secondry reads.
        echo
        echo "Processing sample $indiv [$j of $len]..."
        echo
        cmd="-t $ftyp -f $indiv -H -N 0 $ugap -o $out_path/stacks/ -p $threads -M $mis -m $minDP -d -i $j"
        echo `which ustacks` $cmd '2>&1'
        echo
        ustacks $cmd 2>&1 | tee -a $out_path/stacks/Ustacks.log
        if [ ${PIPESTATUS[0]} != 0 ]; then echo -e "\033[47;31m ustacks error! Quitting...\033[0m"; exit 1; fi 
        
    done
    set +e
}

function run_cstacks() {
    set -e
    local in_path=$1
    local out_path=$2
    local c_mis=$3
    local batch=$4
    local map=$5
    local threads=$6
    
    get_version 'cstacks'
    if [ ! -z "$cgap" ];
    then
        if [ "$cgap" == 0 ];
        then
            if [ "$f_ver" == 2 ]; then cgap='--disable_gapped'; else cgap=''; fi
        else
            if [ "$f_ver" == 2 ]; then cgap=''; fi
        fi
    fi
    cmd="-P $in_path -M $map -n $c_mis $cgap -p $threads"
    echo
    echo `which cstacks` $cmd '2>&1'
    echo
    cstacks $cmd 2>&1 | tee $out_path/Cstacks.log
    if [ ${PIPESTATUS[0]} != 0 ]; then echo -e "\033[47;31m cstacks error! Quitting...\033[0m"; exit 1; fi 
    set +e
}

check_files() {
    local in_path=$1
    local sa_path=$2
    local len=${#pop[@]}   
    for ((i=0;i<$len;i++));
    do
        indiv=${pop[$i]}
        let j=$i+1
        guess_fmt $in_path $indiv
        check_fmt $in_path $indiv $suffix
        ez=$in_path/$indiv.$suffix
        pe1=$sa_path/${indiv}_1.$suffix
        pe2=$sa_path/${indiv}_2.$suffix
        if [ ! -f "$ez" ] || ([ ! -f "$pe1" ] && [ ! -f "$pe2" ]);
        then
            echo "File name error, please rename files with enzyme cut sites as individual.fq.gz, e.g. indiv1.fq.gz"
            echo "And rename files with random sheared ends as individual_2.fq.gz, e.g. indiv1_2.fq.gz"
            exit 1
        fi
        indivs[$i]=$ez # array for individuals.
        if [ $iter ] && [ $j -lt $len ];
        then
            ftyp=''
        fi
    done
}

###### Preliminary ######

######Set environment ######
cur_path=$(cd `dirname $0`; pwd -P)
chmod +x $cur_path/bin/*.pl
export PATH=$cur_path/bin:$PATH
(sort_read_pairs_multi.pl >&/dev/null && CP3_Opti.pl >&/dev/null) || \
(echo "Incompleted installation of RADassembler!" && \
exit 1) || exit 1
###### Select similarity threshold ######
if [ "$1" = 'chooseN' ];
then
    chooseN $2 $3 $4 $5 $6 $7 $8 $9
    if [ $? == 0 ]; then exit 0; else exit 1; fi
fi
if [ "$1" = 'chooseM' ]; 
then
    chooseM $2 $3 $4 $5 $6 $7 $8 $9
    if [ $? == 0 ]; then exit 0; else exit 1; fi
fi
if [ "$1" = 'r80' ];
then
    run_r80 $2 $3 $4 $5 $6 $7
    if [ $? == 0 ]; then exit 0; else exit 1; fi
fi
([ "$1" = '-h' ] || [ $# = 0 ]) && echo "$Usage" && exit 0

###### Default parameters ######
[ -z "$in_path" ] && echo "Please indicate input path!" && exit 1
[ -z "$out_path" ] && echo "Please indicate out path!" && exit 1
[ -z "$samp" ] && echo "Please indicate paired-end file path!" && exit 1
[ -z "$map" ] && echo "Please indicate a PopMap file!" && exit 1
mis=${mis:-2};c_mis=${c_mis:-1};minDP=${minDP:-3};minL=${minL:-3};threads=${threads:-1};kmer=${kmer:-27}
[ "$verify" == 0 ] && verify='-x'
[ -z "$cov" ] || cov="-c $cov"
if [ -z "$asmb" ]; then asmb=1; dasmb='Yes'; else dasmb='No'; fi
if [ -z "$assembler" ]; then assembler='cap3'; elif [ "$assembler" == 'velvet' ]; 
then if [ ! `which velvetg 2>/dev/null` ] || [ ! `which velveth 2>/dev/null` ];
then echo "Please install velvet!"; fi; fi
if [ "$assembler" != 'cap3' ] && [ "$assembler" != 'velvet' ];
then echo "Assembler can only be cap3 or velvet."; exit 1; fi
###### Continue to assembly ######
if [ "$run_flg" == 'assembly' ];
then
    echo "Continue to run assembly..."
    t1=$(date +%s)
    goto assembly
fi 
######################################
if [ -d "$out_path" ];
then 
    echo -e "\033[47;31m Directory [$out_path] exists!\033[0m"
    echo -e "\033[47;31m Do you really want to delete it?\033[0m"
    read con
    if [ "$con" == 'y' ] || [ "$con" == 'yes' ];
    then
        echo "Deleting $out_path..."
        rm -rf $out_path
    elif [ "$con" == 'r' ];
    then
        echo "Continue anyway..."
    else
        echo "Directory exists, Please rename it!"
        exit 1;
    fi
fi
###### Sort reads by Stacks ######
read_ind_order $map
mkdir -p $out_path/stacks
len=${#pop[@]}
indivs=()
###### Check Files ######
check_files $in_path $samp
 
###### Single Run #######
if [ "$run_flg" == 'ustacks' ];
then
    echo "Single run of ustacks is starting."
    run_ustacks $out_path $mis $minDP $threads
    if [ $? == 0 ]; then echo "Single run of ustacks is done."; exit 0; else exit 1; fi    
fi
if [ "$run_flg" == 'cstacks' ];
then
    echo "Single run of cstacks is starting."
    run_cstacks $in_path $out_path $c_mis 1 $map $threads
    if [ $? == 0 ]; then echo "Single run of cstacks is done."; exit 0; else exit 1; fi
fi   
#########################
###### Parameters ######
cmd="RADassembler cmd: $0 $*"
par="$cmd

Programs versions:
$VERSION
`ustacks --version 2>&1`
`cstacks --version 2>&1`
cap3 `cap3 2>&1 | awk 'NR==1 {print $1,$2}'`

Parameters:
  Number of individuals                  : $len
  Path of reads for clustering[read1]    : $in_path
  Path of reads for assembly[paired-end] : $samp
  Path of output results                 : $out_path
  Minimum depth for stacks               : $minDP
  Mismatch[ustacks]                      : $mis
  Mismatch[cstacks]                      : $c_mis
  Number of threads                      : $threads
  Assembly                               : $dasmb
  Assembler                              : $assembler
  Depth for assembly                     : $minL
"
echo "======================================================"
echo -e "$par" | tee $out_path/RADassembler.par
echo "======================================================"
echo
#####################
function main(){    
###### Ustacks ######
t1=$(date +%s)
u_flag=`grep 'ustacks is done' $out_path/stacks/Ustacks.log 2>/dev/null |wc -l`
if [ $u_flag != $len ]; then
echo "======================================================"
echo "  [`tcmd`] Running ustacks..."
echo "======================================================"
run_ustacks $out_path $mis $minDP $threads
if [ $? != 0 ];
then
    exit 1;
fi
#################################
running_time ustacks
fi
###### cstacks and sstacks ######
c_flag=`grep 'cstacks is done' $out_path/stacks/Cstacks.log 2>/dev/null`
if [ -z "$c_flag" ]; then
echo "======================================================"
echo "  [`tcmd`] Running cstacks..."
echo "======================================================"
run_cstacks $out_path/stacks $out_path/stacks $c_mis 1 $map $threads
if [ $? != 0 ];
then
    exit 1;
fi
running_time cstacks
fi
###### Continue to run assembly by flag ######
#assembly:
echo "======================================================"
echo "  [`tcmd`] Running sstacks..."
echo "======================================================"
cmd="-P $out_path/stacks/ -M $map -p $threads"
echo
echo `which sstacks` $cmd '2>&1'
echo
sstacks $cmd 2>&1 | tee $out_path/stacks/Sstacks.log
if [ ${PIPESTATUS[0]} != 0 ]; then echo -e "\033[47;31m sstacks error, exiting...\033[0m"; exit 1; fi 
running_time sstacks
###############################
###### export read pairs ######
echo "==========================================================="
echo "  [`tcmd`] Exporting fasta files..."
echo "==========================================================="
if [ -d "$out_path/reads_export" ];
then
    echo -e "\033[47;31m Directory [$out_path/reads_export] exists \033[0m"
    echo -e "\033[47;31m Do you want to delete it ? y/n \033[0m"
    read con
    if [ "$con" == 'y' ] || [ "$con" == 'yes' ];
    then
        echo "Deleting $out_path/reads_export..."
        rm -rf $out_path/reads_export
    elif [ "$con" == 'r' ];
    then
        echo "Continue anyway..."
    else
        echo "Directory exists, please rename it."
        exit 1;
    fi
fi
mkdir -p $out_path/reads_export
cmd="-p $out_path/stacks/ -s $samp -o $out_path/reads_export -T $threads -m $minL -i ${ftyp#"gz"} $cov $verify"
echo
echo `which sort_read_pairs_multi.pl` $cmd '2>&1'
echo
sort_read_pairs_multi.pl $cmd 2>&1 | tee $out_path/stacks/export.log
if [ ${PIPESTATUS[0]} != 0 ]; then echo "Error in exporting fasta files, exiting...";exit 1;fi
##########################
running_time 'Exporting fasta'
###### run assembly ######
if [ "$asmb" == 1 ];
then
    echo "==========================================================="
    echo "  [`tcmd`] Running local assembly..."
    echo "==========================================================="
    cmd="-i $out_path/reads_export -o $out_path/Assembly -l $out_path/stacks/*catalog.tags.tsv* -a $assembler -t $threads -k $kmer -d"
    echo
    echo `which CP3_Opti.pl` $cmd
    echo
    CP3_Opti.pl $cmd
    if [ $? != 0 ]; then echo "Error in local assembly, exiting..."; exit 1; fi
fi
running_time Assembly
echo "[`tcmd`] Done!"
t2=$(date +%s)
tot_run_time=`covert_time $(( $t2 - $t0 ))`
echo
echo "Total running time is $tot_run_time, thank you for using RADassembler."
echo
}

main
