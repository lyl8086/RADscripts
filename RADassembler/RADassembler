#!/bin/bash
shopt -s  expand_aliases 

Usage='
    #############################################################
    A Pipeline For Assembly of RAD-seq from Multiple Indidviduals
    #############################################################
	
    -i: input path. Clean reads containing enzyme site, read1? 
        e.g. (individual name).fq[fa][.gz].
    -o: out path. 
    -s: paired-end path. Paired-end reads, read2?
        e.g. (individual name_[12]).fq[fa][.gz].
    -f: input file type. "fasta", "fastq", "gzfastq", "gzfasta"
    -P: PopMaP file
    -M: minimum stacks depth
	-D: minimum read depth of a locus to export for assembly, can be [lower:upper]
    -m: mismatch for ustacks
    -n: mismatch for cstacks
    -A: turn on assembly
    -t: number of threads
'
while getopts "i:o:s:m:M:n:f:P:D:t:hA" arg
do
	case $arg in
		i)
			in_path=$OPTARG     #file path.
			;;
		o)
			out_path=$OPTARG    #out path.
			;;
		s)
			samp=$OPTARG        #paired-end file path.
			;;
		f)
			ftyp=$OPTARG        #file type.
			;;
		M)
			minDP=$OPTARG       #minimum stacks depth.
			;;
		m)
			mis=$OPTARG         #mismatch for ustacks.
			;;
		n)
			c_mis=$OPTARG       #mismatch for cstacks.
			;;
		P)
			map=$OPTARG         #PopMap file								
			;;
		D)
			minL=$OPTARG		#minimum loci depth for export reads.
			;;
		t)
			threads=$OPTARG     
			;;
		h)
			echo "$Usage"
			exit 1
			;;
        A)
            asmb=1
            ;;
		?)
            echo -e "\033[31m Unknown argument!\033[0m"
			exit 1
			;;
	esac
done
###### Functions ######
iter=0
function guess_fmt()
{

	if [ "$ftyp" == 'gzfastq' ];
    then
        suffix='fq.gz'
    elif [ "$ftyp" == 'fastq' ];
    then
        suffix='fq'
    elif [ "$ftyp" == 'fasta' ];
    then
        suffix='fa'
    elif [ "$ftyp" == 'gzfasta' ];
    then
        suffix='fa.gz'
    else
        iter=1
        f=`ls $1/$2*`
        if [ ${f:0-6} == '.fq.gz' ];
        then
            ftyp='gzfastq'
            suffix='fq.gz'
        elif [ ${f:0-9} == '.fastq.gz' ];
        then
            ftyp='gzfastq'
            suffix='fastq.gz'
        elif [ ${f:0-6} == '.fa.gz' ];
        then
            ftyp='gzfasta'
            suffix='fa.gz'
        elif [ ${f:0-9} == '.fasta.gz' ];
        then
            ftyp='fasta'
            suffix='fasta.gz'
        elif [ ${f:0-3} == '.fq' ];
        then
            ftyp='fastq'
            suffix='fq'
        elif [ ${f:0-6} == '.fastq' ];
        then
            ftyp='fastq'
            suffix='fastq'
        elif [ ${f:0-3} == '.fa' ];
        then
            ftyp='fasta'
            suffix='fa'
        elif [ ${f:0-6} == '.fasta' ];
        then
            ftyp='fasta'
            suffix='fasta'
        else
            echo -e "\033[47;31m Unknown file format! [$f]\033[0m"
            echo -e "Quitting..."
            exit 1
        fi
    fi

}

check_fmt() {
    
    if [ ! -f "$1/$2.$3" ];
    then
        ftyp=''
        echo -e "\033[47;31m File format is not correct, I'm guessing...\033[0m"
        guess_fmt $1 $2
    fi
}
########################

####### Test part ######
if [ $# -lt 4 ] || [ $1 = -h ];
then 
	echo "$Usage"
	exit 1
fi
if [ ! `which ustacks 2>/dev/null` ];
then
	echo "ustacks not exist!"
	echo "please download it at http://catchenlab.life.illinois.edu/stacks/"
	exit 1
fi
if [ ! `which cstacks 2>/dev/null` ];
then
	echo "cstacks not exist!"
	echo "please download it at http://catchenlab.life.illinois.edu/stacks/"
	exit 1
else
	cstacks --version 2>/tmp/RADpipeline.log
	v=`cut -d ' ' -f2 /tmp/RADpipeline.log | tr -d 'a-zA-Z'`
	if [ `echo "$v<1.45"|bc` -ne 0 ];
	then
		echo "You need to update stacks to 1.45 or later."
		exit 1
	fi
fi
if [ ! `which sstacks 2>/dev/null` ];
then
	echo "sstacks not exist!"
	echo "please download it at http://catchenlab.life.illinois.edu/stacks/"
	exit 1
else
	sstacks --version 2>/tmp/RADpipeline.log
	v=`cut -d ' ' -f2 /tmp/RADpipeline.log | tr -d 'a-zA-Z'`
	if [ `echo "$v<1.45"|bc` -ne 0 ];
	then
		echo "You need to update stacks to 1.45 or later."
		exit 1
	fi
fi
if [ ! `which cap3 2>/dev/null` ];
then
echo "cap3 not exist!"
echo "please download it at http://seq.cs.iastate.edu/cap3.html"
exit 1
fi
############################

######Set environment ######
cur_path=`which RADassembler`
cur_path=${cur_path%"RADassembler"}
chmod +x $cur_path/bin/*.pl
export PATH=$cur_path/bin:$PATH
#echo "Your Path is:$PATH"
################################

###### Default parameters ######
if [ -z "$in_path" ];
then
	echo "Please indicate input path!"
	exit 1
fi
if [ -z "$out_path" ];
then
	echo "Please indicate out path!"
	exit 1
fi
if [ -z "$samp" ];
then
	echo "Please indicate paired-end file path!"
	exit 1
fi
if [ -z "$map" ];
then
	echo "Please indicate PopMap file!"
	exit 1
fi

if [ -z "$mis" ];
then
	mis=2
fi
if [ -z "$c_mis" ];
then
	c_mis=1
fi
if [ -z "$minDP" ];
then
	minDP=3
fi
if [ -z "$minL" ];
then
	minL=3
fi
if [ -z "$threads" ];
then
    threads=1
fi
######################################

###### Sort the reads by Stacks ######
if [ -d "$out_path" ];
then 
	echo -e "\033[47;31m Directory exists! Do you want to delete it ?!!!\033[0m"
	read con
	if [ "$con" == 'y' ] || [ "$con" == 'yes' ];
	then
		echo "Deleting $out_path..."
		rm -rf $out_path
	else
		echo "Directory exists, Please rename it!"
		exit 1;
	fi
fi

mkdir -p $out_path/stacks
mkdir -p $out_path/reads_export

###### Read PopMap ######
declare -A pop
while read line
do
	key=`echo $line | awk '{print $1}'`
	val=`echo $line | awk '{print $2}'`
	pop[$key]="$val"
done < $map

alias tcmd="date '+%A %D %X'"
len=${#pop[@]}
i=1
echo "======================================================"
echo "  [`tcmd`] Running ustacks..."
echo "======================================================"
for indv in ${!pop[@]};
do
    guess_fmt $in_path $indv
    check_fmt $in_path $indv $suffix
    #echo "ustacks -t $ftyp -f $in_path/$indv.$suffix -o $out_path/stacks/ -p $threads -M $mis -m $minDP -d -i $i 2>&1 | tee -a $out_path/stacks/Ustacks.log"
    ustacks -t $ftyp -f $in_path/$indv.$suffix -o $out_path/stacks/ -p $threads -M $mis -m $minDP -d -i $i 2>&1 | tee -a $out_path/stacks/Ustacks.log
    if [ $iter ] && [ $i -lt $len ];
    then
        ftyp=''
    fi
    let i+=1
done
tt=`grep 'ustacks is done.' $out_path/stacks/Ustacks.log`
if [ -z "$tt" ];
then
    echo -e "\033[47;31m Ustacks error! Quitting...\033[0m"
	exit 1
fi
#################################

###### cstacks and sstacks ######
echo "======================================================"
echo "  [`tcmd`] Running cstacks..."
echo "======================================================"
cstacks -b 1 -P $out_path/stacks/ -M $map -n $c_mis -p $threads 2>&1 | tee $out_path/stacks/Cstacks.log
tt=`grep 'cstacks is done.' $out_path/stacks/Cstacks.log`
if [ -z "$tt" ];
then
	exit 1
fi
echo "======================================================"
echo "  [`tcmd`] Running sstacks..."
echo "======================================================"
sstacks -b 1 -P $out_path/stacks/ -M $map -p $threads 2>&1 | tee $out_path/stacks/Sstacks.log
tt=`grep 'sstacks is done.' $out_path/stacks/Sstacks.log`
if [ -z "$tt" ];
then
	exit 1
fi
###############################

###### export read pairs ######
echo "======================================================"
echo "  [`tcmd`] Exporting fasta files..."
echo "======================================================"
sort_read_pairs.pl -p $out_path/stacks/ -s $samp -o $out_path/reads_export -m $minL -i ${ftyp#"gz"} 2>&1 | tee $out_path/stacks/export.log
##########################

###### run assembly ######
if [ "$asmb" == 1 ];
then
    echo "======================================================"
    echo "  [`tcmd`] Run local assembly..."
    echo "======================================================"
    CP3_Opti.pl -i $out_path/reads_export -o $out_path/Assembly -l $out_path/stacks/batch_1.catalog.tags* -t $threads
fi

echo " [`tcmd`] Done!"

